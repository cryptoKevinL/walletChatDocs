definitions:
  entity.Bookmarkitem:
    properties:
      chain:
        type: string
      id:
        type: integer
      nftaddr:
        type: string
      walletaddr:
        type: string
    type: object
  entity.Chatitem:
    properties:
      fromaddr:
        type: string
      id:
        type: integer
      message:
        type: string
      nftaddr:
        type: string
      nftid:
        type: string
      read:
        type: boolean
      sender_name:
        type: string
      timestamp:
        type: string
      timestamp_dtm:
        type: string
      toaddr:
        type: string
    type: object
  entity.Chatiteminbox:
    properties:
      chain:
        type: string
      context_type:
        type: string
      fromaddr:
        type: string
      id:
        type: integer
      logo:
        type: string
      message:
        type: string
      name:
        type: string
      nftaddr:
        type: string
      nftid:
        type: string
      read:
        type: boolean
      sender_name:
        type: string
      timestamp:
        type: string
      timestamp_dtm:
        type: string
      toaddr:
        type: string
      type:
        type: string
      unread:
        type: integer
    type: object
  entity.Groupchatitem:
    properties:
      context_type:
        type: string
      fromaddr:
        type: string
      id:
        type: integer
      message:
        type: string
      nftaddr:
        type: string
      sender_name:
        type: string
      timestamp:
        type: string
      timestamp_dtm:
        type: string
      type:
        type: string
    type: object
host: restwalletchat-app-sey3k.ondigitalocean.app
info:
  contact:
    email: walletchatextension@gmail.com
    url: https://walletchat.fun
  description: This is the WalletChat messagez
  title: WalletChat API
  version: "1.0"
paths:
  /community:
    post:
      consumes:
      - application/json
      description: Community Chat Data
      parameters:
      - description: Community Message Chat Data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Groupchatitem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Groupchatitem'
            type: array
      summary: CreateCommunityChatitem creates GroupChatitem just with community tag
        (likely could be consolidated)
      tags:
      - GroupChat
  /create_bookmark:
    post:
      consumes:
      - application/json
      description: Bookmarks keep an NFT/Community group chat in the sidebar
      parameters:
      - description: Add Bookmark from Community Group Chat
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Bookmarkitem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Bookmarkitem'
            type: array
      summary: Join an NFT or Community group chat
      tags:
      - GroupChat
  /create_chatitem:
    post:
      consumes:
      - application/json
      description: For DMs, CreateChatItem is used to store the message in the backed
        database
      parameters:
      - description: Direct Message Chat Data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Chatitem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatitem'
            type: array
      summary: Create/Insert DM chat message (1-to-1 messaging)
      tags:
      - DMs
  /create_groupchatitem:
    post:
      consumes:
      - application/json
      description: Currently used for all messages outside of DMs
      parameters:
      - description: Group Message Chat Data
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Groupchatitem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Groupchatitem'
            type: array
      summary: Create/Insert chat message for Community/NFT/Group Messaging
      tags:
      - GroupChat
  /delete_bookmark:
    post:
      consumes:
      - application/json
      description: Bookmarks keep an NFT/Community group chat in the sidebar
      parameters:
      - description: Remove Bookmark from Community Group Chat
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/entity.Bookmarkitem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Bookmarkitem'
            type: array
      summary: Leave an NFT or Community group chat
      tags:
      - GroupChat
  /get_bookmarks/{address}/:
    get:
      consumes:
      - application/json
      description: This used for UI purposes, checking if a user/wallet has bookmarked
        a community.
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Bookmarkitem'
            type: array
      summary: Check if a wallet address has bookmarked/joined given NFT contract
      tags:
      - GroupChat
  /get_bookmarks/{walletaddr}/{nftaddr}:
    get:
      consumes:
      - application/json
      description: This used for UI purposes, checking if a user/wallet has bookmarked
        a community.
      parameters:
      - description: Wallet Address
        in: path
        name: walletaddr
        required: true
        type: string
      - description: NFT Contract Address
        in: path
        name: nftaddr
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
      summary: Check if a wallet address has bookmarked/joined given NFT contract
      tags:
      - GroupChat
  /get_groupchatitems/{address}:
    get:
      consumes:
      - application/json
      description: Community Chat Data
      parameters:
      - description: Get Group Chat Data Data By Address
        in: path
        name: message
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Groupchatitem'
            type: array
      summary: GetGroupChatItems gets group chat data for a given address
      tags:
      - GroupChat
  /get_inbox/{address}:
    get:
      consumes:
      - application/json
      description: Get Each 1-on-1 Conversation, NFT and Community Chat For Display
        in Inbox
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatiteminbox'
            type: array
      summary: Get Inbox Summary With Last Message
      tags:
      - Inbox
  /get_unread_cnt/{address}:
    get:
      consumes:
      - application/json
      description: Get Each 1-on-1 Conversation, NFT and Community Chat For Display
        in Inbox
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      summary: Get all unread messages TO a specific user, used for total count notification
        at top notification bar
      tags:
      - Inbox
  /get_unread_cnt/{address}/{nftaddr}/{nftid}:
    get:
      consumes:
      - application/json
      description: Get Unread count for specifc NFT context given a wallet address
        and specific NFT
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      - description: NFT Contract Address
        in: path
        name: nftaddr
        required: true
        type: string
      - description: NFT ID
        in: path
        name: nftid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      summary: Get all unread messages for a specific NFT context
      tags:
      - NFT
  /get_unread_cnt/{fromaddr}/{toaddr}:
    get:
      consumes:
      - application/json
      description: Get Unread count for DMs
      parameters:
      - description: 'TO: Wallet Address'
        in: path
        name: toaddr
        required: true
        type: string
      - description: 'FROM: Wallet Address'
        in: path
        name: from
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      summary: Get all unread messages between two addresses
      tags:
      - Unused/Legacy
  /get_unread_cnt_by_type/{address}/{type}:
    get:
      consumes:
      - application/json
      description: Get Each 1-on-1 Conversation, NFT and Community Chat For Display
        in Inbox
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      - description: Message Type - nft|community|dm|all
        in: path
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      summary: Get all unread messages TO a specific user, used for total count notification
        at top notification bar
      tags:
      - Unused/Legacy
  /get_unread_cnt_nft/{address}:
    get:
      consumes:
      - application/json
      description: Get Unread count for all NFT contexts given a wallet address
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      summary: Get all unread messages for all NFT related chats for given user
      tags:
      - Unused/Legacy
  /getall_chatitems/{address}:
    get:
      consumes:
      - application/json
      description: Get all Chat Items for DMs for a given wallet address
      parameters:
      - description: Wallet Address
        in: path
        name: toaddr
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatitem'
            type: array
      summary: Get Chat Item For Given Wallet Address
      tags:
      - Unused/Legacy
  /getall_chatitems/{fromaddr}/{toaddr}:
    get:
      consumes:
      - application/json
      description: Get chat data between the given two addresses, TO and FROM and
        interchangable here
      parameters:
      - description: 'TO: Wallet Address'
        in: path
        name: toaddr
        required: true
        type: string
      - description: 'FROM: Wallet Address'
        in: path
        name: from
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatitem'
            type: array
      summary: Get Chat Data Between Two Addresses
      tags:
      - DMs
  /getnft_chatitems/{address}:
    get:
      consumes:
      - application/json
      description: Get ALL NFT context items for a given wallet address
      parameters:
      - description: Wallet Address
        in: path
        name: toaddr
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatitem'
            type: array
      summary: Get NFT Related Chat Items For Given Wallet Address
      tags:
      - Unused/Legacy
  /getnft_chatitems/{address}/{nftaddr}/{nftid}:
    get:
      consumes:
      - application/json
      description: Get all specified NFT contract and ID items for a given wallet
        address
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      - description: NFT Contract Address
        in: path
        name: nftaddr
        required: true
        type: string
      - description: NFT ID
        in: path
        name: nftid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatitem'
            type: array
      summary: Get NFT Related Chat Items For Given NFT Contract and ID, relating
        to one wallet
      tags:
      - Unused/Legacy
  /getnft_chatitems/{fromaddr}/{toaddr}/{nftaddr}/{nftid}:
    get:
      consumes:
      - application/json
      description: Get ALL NFT context items for a specifc NFT context convo between
        two wallets
      parameters:
      - description: NFT Contract Address
        in: path
        name: nftaddr
        required: true
        type: string
      - description: NFT ID
        in: path
        name: nftid
        required: true
        type: string
      - description: 'TO: Wallet Address'
        in: path
        name: toaddr
        required: true
        type: string
      - description: 'FROM: Wallet Address'
        in: path
        name: from
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatitem'
            type: array
      summary: Get NFT Related Chat Items For Given NFT Contract and ID, between two
        wallet addresses (TO and FROM are interchangable)
      tags:
      - NFT
  /getnft_chatitems/{nftaddr}/{nftid}:
    get:
      consumes:
      - application/json
      description: Get ALL NFT context items for a given wallet address
      parameters:
      - description: NFT Contract Address
        in: path
        name: nftaddr
        required: true
        type: string
      - description: NFT ID
        in: path
        name: nftid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Chatitem'
            type: array
      summary: Get NFT Related Chat Items For Given NFT Contract and ID
      tags:
      - Unused/Legacy
  /unreadcount/{address}:
    get:
      consumes:
      - application/json
      description: Get Unread count just given an address
      parameters:
      - description: Wallet Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
      summary: Get all unread messages TO a specific user, used for total count notification
        at top notification bar
      tags:
      - Inbox
swagger: "2.0"
